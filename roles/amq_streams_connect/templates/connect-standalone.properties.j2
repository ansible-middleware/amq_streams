# {{ ansible_managed }}

# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# These are defaults. This file just demonstrates how to override some settings.
bootstrap.servers={{ amq_streams_connect_bootstrap_servers }}

# Security protocol
{% if amq_streams_connect_broker_tls_enabled and not amq_streams_connect_broker_auth_enabled %}
security.protocol=SSL
producer.security.protocol=SSL
consumer.security.protocol=SSL
{% elif amq_streams_connect_broker_tls_enabled and amq_streams_connect_broker_auth_enabled %}
security.protocol=SASL_SSL
producer.security.protocol=SASL_SSL
consumer.security.protocol=SASL_SSL
{% elif not amq_streams_connect_broker_tls_enabled and amq_streams_connect_broker_auth_enabled %}
security.protocol=SASL_PLAINTEXT
producer.security.protocol=SASL_PLAINTEXT
consumer.security.protocol=SASL_PLAINTEXT
{% else %}
# No security protocol
{% endif %}

{% if amq_streams_connect_broker_auth_enabled is defined and amq_streams_connect_broker_auth_enabled %}
{% if amq_streams_connect_broker_admin_mechanism == "PLAIN" %}
# Plain Login Module
sasl.mechanism=PLAIN
sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username="{{ amq_streams_connect_broker_auth_username }}" password="{{ amq_streams_connect_broker_auth_password }}";
# Producer
producer.sasl.mechanism=PLAIN
producer.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username="{{ amq_streams_connect_broker_auth_username }}" password="{{ amq_streams_connect_broker_auth_password }}";
# Consumer
consumer.sasl.mechanism=PLAIN
consumer.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username="{{ amq_streams_connect_broker_auth_username }}" password="{{ amq_streams_connect_broker_auth_password }}";
{% elif amq_streams_connect_broker_admin_mechanism == "SCRAM-SHA-512" %}
# SCRAM Login Module
sasl.mechanism=SCRAM-SHA-512
sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required username="{{ amq_streams_connect_broker_auth_username }}" password="{{ amq_streams_connect_broker_auth_password }}";
# Producer
producer.sasl.mechanism=SCRAM-SHA-512
producer.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required username="{{ amq_streams_connect_broker_auth_username }}" password="{{ amq_streams_connect_broker_auth_password }}";
# Consumer
consumer.sasl.mechanism=SCRAM-SHA-512
consumer.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required username="{{ amq_streams_connect_broker_auth_username }}" password="{{ amq_streams_connect_broker_auth_password }}";
{% endif %}
{% endif %}

{% if amq_streams_connect_broker_tls_enabled %}
ssl.truststore.location={{ amq_streams_connect_broker_tls_truststore_client_location }}/{{ amq_streams_connect_broker_tls_truststore_client }}
ssl.truststore.password={{ amq_streams_connect_broker_tls_truststore_client_password }}
# Disable hostname verification
ssl.endpoint.identification.algorithm=
# Producer
producer.ssl.truststore.location={{ amq_streams_connect_broker_tls_truststore_client_location }}/{{ amq_streams_connect_broker_tls_truststore_client }}
producer.ssl.truststore.password={{ amq_streams_connect_broker_tls_truststore_client_password }}
# Disable hostname verification
producer.ssl.endpoint.identification.algorithm=
# Consumer
consumer.ssl.truststore.location={{ amq_streams_connect_broker_tls_truststore_client_location }}/{{ amq_streams_connect_broker_tls_truststore_client }}
consumer.ssl.truststore.password={{ amq_streams_connect_broker_tls_truststore_client_password }}
# Disable hostname verification
consumer.ssl.endpoint.identification.algorithm=
{% endif %}

# The converters specify the format of data in Kafka and how to translate it into Connect data. Every Connect user will
# need to configure these based on the format they want their data in when loaded from or stored into Kafka
key.converter=org.apache.kafka.connect.json.JsonConverter
value.converter=org.apache.kafka.connect.json.JsonConverter
# Converter-specific settings can be passed in by prefixing the Converter's setting with the converter we want to apply
# it to
key.converter.schemas.enable=true
value.converter.schemas.enable=true

offset.storage.file.filename=/tmp/connect.offsets
# Flush much faster than normal, which is useful for testing/debugging
offset.flush.interval.ms=10000

# Set to a list of filesystem paths separated by commas (,) to enable class loading isolation for plugins
# (connectors, converters, transformations). The list should consist of top level directories that include
# any combination of:
# a) directories immediately containing jars with plugins and their dependencies
# b) uber-jars with plugins and their dependencies
# c) directories immediately containing the package directory structure of classes of plugins and their dependencies
# Note: symlinks will be followed to discover dependencies or plugins.
# Examples:
# plugin.path=/usr/local/share/java,/usr/local/share/kafka/plugins,/opt/connectors,
{% if  path_to_file_connect_lib is defined %}
plugin.path={{ path_to_file_connect_lib }}
{% else %}
#plugin.path=
{% endif %}
