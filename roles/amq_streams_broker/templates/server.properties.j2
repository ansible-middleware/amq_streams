# {{ ansible_managed }}

# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#
# This configuration file is intended for use in ZK-based mode, where Apache ZooKeeper is required.
# See kafka.server.KafkaConfig for additional details and defaults
#

############################# Server Basics #############################

# The id of the broker. This must be set to a unique integer for each broker.
broker.id={{ amq_streams_broker_inventory_group.index(inventory_hostname) }}

############################# Socket Server Settings #############################

# The address the socket server listens on. If not configured, the host name will be equal to the value of
# java.net.InetAddress.getCanonicalHostName(), with PLAINTEXT listener name, and port 9092.
#   FORMAT:
#     listeners = listener_name://host_name:port
#   EXAMPLE:
#     listeners = PLAINTEXT://your.host.name:9092
{% if amq_streams_broker_listeners is defined %}
listeners={{ amq_streams_broker_listeners | join(",") }}
{% elif amq_streams_broker_listener_port is defined %}
listeners=PLAINTEXT://:{{ amq_streams_broker_listener_port }}
{% else %}
#listeners=PLAINTEXT://:9092
{% endif %}

{% if amq_streams_broker_inter_broker_listener is defined %}
# Name of listener used for communication between brokers
inter.broker.listener.name={{ amq_streams_broker_inter_broker_listener }}
{% endif %}

# Listener name, hostname and port the broker will advertise to clients.
# If not set, it uses the value for "listeners".
#advertised.listeners=PLAINTEXT://your.host.name:9092

{% if amq_streams_broker_auth_enabled and amq_streams_broker_auth_listeners is defined %}
# Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details
listener.security.protocol.map={{ amq_streams_broker_auth_listeners | join(",") }}

# The list of SASL mechanisms enabled in the Kafka server
sasl.enabled.mechanisms={{ amq_streams_broker_auth_sasl_mechanisms | join(",") }}
{% if amq_streams_broker_inter_broker_auth_sasl_mechanisms is defined %}
# SASL mechanism used for inter-broker communication
sasl.mechanism.inter.broker.protocol={{ amq_streams_broker_inter_broker_auth_sasl_mechanisms }}
{% endif %}
{% else %}
# Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details
#listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL
{% endif %}

{% if amq_streams_broker_inter_broker_listener_auth is defined %}
# Authentication mechanism for the inter-broker listener
{{ amq_streams_broker_inter_broker_listener_auth }}
{% endif %}

{% if amq_streams_broker_tls_enabled %}
# Broker Keystore and Trustore files
ssl.keystore.location={{ amq_streams_broker_tls_keystore_location }}/{{ amq_streams_broker_tls_keystore }}
ssl.keystore.password={{ amq_streams_broker_tls_keystore_password }}
ssl.truststore.location={{ amq_streams_broker_tls_truststore_location }}/{{ amq_streams_broker_tls_truststore }}
ssl.truststore.password={{ amq_streams_broker_tls_truststore_password }}
{% if amq_streams_broker_auth_enabled %}
ssl.client.auth=required
{% else %}
ssl.client.auth=none
{% endif %}
{% endif %}

# The number of threads that the server uses for receiving requests from the network and sending responses to the network
num.network.threads={{ amq_streams_broker_num_network_threads }}

# The number of threads that the server uses for processing requests, which may include disk I/O
num.io.threads={{ amq_streams_broker_num_io_threads }}

# The send buffer (SO_SNDBUF) used by the socket server
socket.send.buffer.bytes={{ amq_streams_broker_buffer_send_bytes }}

# The receive buffer (SO_RCVBUF) used by the socket server
socket.receive.buffer.bytes={{ amq_streams_broker_buffer_bytes }}

# The maximum size of a request that the socket server will accept (protection against OOM)
socket.request.max.bytes={{ amq_streams_broker_socket_request_max_bytes }}

############################# Log Basics #############################

# A comma separated list of directories under which to store log files
log.dirs={{ amq_streams_broker_data_dir }}

# The default number of log partitions per topic. More partitions allow greater
# parallelism for consumption, but this will also result in more files across
# the brokers.
num.partitions={{ amq_streams_broker_num_partitions }}

# The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.
# This value is recommended to be increased for installations with data dirs located in RAID array.
num.recovery.threads.per.data.dir={{ amq_streams_broker_num_recovery_threads_per_data_dir }}

############################# Internal Topic Settings  #############################
# The replication factor for the group metadata internal topics "__consumer_offsets" and "__transaction_state"
# For anything other than development testing, a value greater than 1 is recommended to ensure availability such as 3.
offsets.topic.replication.factor={{ amq_streams_broker_offsets_topic_replication_factor }}
transaction.state.log.replication.factor={{ amq_streams_broker_transaction_state_log_replication_factor }}
transaction.state.log.min.isr={{ amq_streams_broker_transaction_state_log_min_isr }}

############################# Log Flush Policy #############################

# Messages are immediately written to the filesystem but by default we only fsync() to sync
# the OS cache lazily. The following configurations control the flush of data to disk.
# There are a few important trade-offs here:
#    1. Durability: Unflushed data may be lost if you are not using replication.
#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.
#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to excessive seeks.
# The settings below allow one to configure the flush policy to flush data after a period of time or
# every N messages (or both). This can be done globally and overridden on a per-topic basis.

# The number of messages to accept before forcing a flush of data to disk
#log.flush.interval.messages=10000

# The maximum amount of time a message can sit in a log before we force a flush
#log.flush.interval.ms=1000

############################# Log Retention Policy #############################

# The following configurations control the disposal of log segments. The policy can
# be set to delete segments after a period of time, or after a given size has accumulated.
# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
# from the end of the log.

# The minimum age of a log file to be eligible for deletion due to age
log.retention.hours={{ amq_streams_broker_log_retention_hours }}

# A size-based retention policy for logs. Segments are pruned from the log unless the remaining
# segments drop below log.retention.bytes. Functions independently of log.retention.hours.
#log.retention.bytes=1073741824

# The maximum size of a log segment file. When this size is reached a new log segment will be created.
#log.segment.bytes=1073741824

# The interval at which log segments are checked to see if they can be deleted according
# to the retention policies
log.retention.check.interval.ms={{ amq_streams_broker_log_retention_check_interval_ms }}

############################# Zookeeper #############################

# Zookeeper connection string (see zookeeper docs for details).
# This is a comma separated host:port pairs, each corresponding to a zk
# server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
# You can also append an optional chroot string to the urls to specify the
# root directory for all kafka znodes.
zookeeper.connect={{ amq_streams_broker_zookeeper_host }}:{{ amq_streams_broker_zookeeper_port }}{% for zknode in amq_streams_zookeeper_inventory_group %},{{ zknode }}:{{ amq_streams_broker_zookeeper_port }}{% endfor %}

# Timeout in ms for connecting to zookeeper
zookeeper.connection.timeout.ms={{ amq_streams_broker_zookeeper_connection_timeout_ms }}
zookeeper.session.timeout.ms={{ amq_streams_broker_zookeeper_session_timeout_ms }}

############################# Group Coordinator Settings #############################

# The following configuration specifies the time, in milliseconds, that the GroupCoordinator will delay the initial consumer rebalance.
# The rebalance will be further delayed by the value of group.initial.rebalance.delay.ms as new members join the group, up to a maximum of max.poll.interval.ms.
# The default value for this is 3 seconds.
# We override this to 0 here as it makes for a better out-of-the-box experience for development and testing.
# However, in production environments the default value of 3 seconds is more suitable as this will help to avoid unnecessary, and potentially expensive, rebalances during application startup.
group.initial.rebalance.delay.ms={{ amq_streams_broker_group_initial_rebalance_delay_ms }}
